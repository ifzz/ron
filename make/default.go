// Code generated by go-bindata.
// sources:
// make/default.yaml
// DO NOT EDIT!

package make

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makeDefaultYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x5b\x6f\xdb\x36\x18\x7d\xf7\xaf\x38\xd0\x04\xb8\x6d\x40\xa9\xdd\x86\x3d\x68\x70\x01\xc3\xf5\xdc\x62\x5d\x6c\x38\x49\x31\x60\x1b\x5c\x5a\xa2\x25\xc2\x12\xa9\x92\x94\x9d\xc2\xc9\x7f\x1f\x48\xc9\x8e\x2f\x72\x2e\xe8\x8b\xcd\xcb\x77\x39\xdf\x39\x1f\x49\x6d\x36\x7e\x49\x4d\x86\xa8\x07\x8f\xdd\x96\x52\x19\x4c\xfa\xd7\x1f\x7b\xfe\x68\x6c\xff\xc3\x39\x17\x91\x6f\x47\xde\xfd\x7d\x67\xb3\xf1\x73\xae\x8d\x33\xf6\x5f\xa5\x12\x6e\x16\x84\x41\x10\xe0\x0e\xa9\x62\x25\xc8\x0a\x2b\x26\x12\xa9\xc2\xbd\x95\xee\x2c\x4c\x65\xf7\xb5\x0d\xc1\xc4\x4a\x47\x1d\x80\xa0\x3f\x99\x44\x50\x52\x6c\x27\xb3\x9b\xcb\x0f\xc3\xe9\xd5\x60\x3c\x1d\x46\xb8\x60\x71\x26\xe1\xf7\x27\x13\xdc\xc1\x28\x78\xc4\x83\x37\xf3\x6a\xdb\xe9\xe0\x63\x04\x5a\x24\xbf\xfd\xea\xe6\x83\x9b\xe9\x87\x4f\xd3\x08\x17\xe5\x3a\x71\x0b\x37\x97\xfd\xbf\x6c\x8c\x4a\xd0\x82\xd5\xfe\xdd\x7f\xa2\xaa\x2c\x99\x8a\xfe\xeb\xda\x71\x2e\xd7\x6e\xec\xcc\x3f\xf7\xaf\x87\x57\xd7\xb3\x9b\xe9\xe7\x08\x5e\x66\x4c\xa9\xa3\x30\x4c\xb9\xc9\xaa\x79\x10\xcb\x22\xac\x4a\xcd\xd3\xcc\x84\x4a\x8a\x50\xb1\x9c\x51\xcd\x74\x98\xc8\xb5\xc8\x25\x4d\xc2\xd5\xdb\xe0\x6d\xf0\xce\x6e\x12\x7f\xe3\x32\xdf\xd7\x30\x27\xfd\xc1\x9f\xfd\xd1\x70\xf6\x65\x38\xbd\xfa\x34\xbe\x8c\x70\x91\x72\x83\x84\xe9\x58\xf1\x39\x03\x21\x34\x5f\xd3\xef\x1a\x84\x24\x5c\x99\xef\x20\xc4\xd0\x54\x37\x70\x49\x17\xdd\x59\x0d\xef\xba\x3f\x8a\x50\x67\xe9\x18\xaa\x52\x66\x1c\x81\xf3\x8a\xe7\x89\x1d\xa0\x89\x59\x1a\x2e\x45\x84\x81\x2c\x4a\x9e\x33\x50\xcc\xb9\xa0\xea\x3b\x8c\x44\x60\x65\x0c\xb7\xf0\x66\xfe\xc6\x52\x78\xef\x7c\xe7\x6c\x21\x15\xab\xe3\xd8\x6c\xa5\x62\xa5\x9b\xc4\x45\x12\xe1\xae\x59\x2f\x96\x09\x57\x20\x25\xce\xc6\x01\x46\x63\x3b\xeb\xf9\xf6\x17\xa3\xf1\xf8\xaa\xe7\x3b\x3b\xa4\xb2\x06\x0b\x22\x5b\xfd\x43\x2b\x33\xf1\xaf\xfb\x23\x90\x3c\x59\xe4\x96\x05\x8f\xfc\x0d\x7f\x3a\x9c\x8c\x83\x11\x37\x03\x59\x14\xdc\xf4\xfc\x23\x46\xb1\xb3\xe9\x97\xe5\x17\xa6\x34\x97\xa2\x57\x87\xd9\xdb\xb8\xa4\x05\xeb\xd9\x0c\x9e\x2d\xc9\xe5\x0a\xdf\x04\xa9\xdc\x52\x38\xa3\x79\xfe\x22\x1a\x73\x2e\xaa\xdb\x2d\x76\x50\x91\x34\xeb\x09\x55\x6b\x2e\x9e\x47\x2e\x5d\x18\xa6\x1e\xd6\x67\x35\x92\x42\xa7\xa7\xd4\x2f\xa4\x82\xd4\xe0\x02\x9e\xcb\xec\xc1\xab\x33\x79\xf0\xd6\x5c\x24\x72\xad\xbd\xdf\x91\xc8\xc6\x1c\x28\x15\x17\x66\x01\xcf\xc5\xe4\x22\xb5\xc8\x6b\xda\xa5\xde\x71\x1e\x04\xc1\xbf\xc2\xdb\xf9\x1c\xe9\xbb\x67\xb8\x33\x69\x91\x57\xea\x16\x6d\xf7\x7c\x1f\x15\x36\xcc\xf9\xfc\x58\xb8\x5a\xa2\x46\x1d\x27\x89\x14\xac\x03\xc4\x72\xb5\xa5\xeb\x40\xa4\x69\x25\x2c\x02\xb7\x4d\x53\xe6\xc4\x90\x25\x13\x56\x35\x25\xd7\x9a\x29\x5b\xbc\xce\xe4\x1a\x26\x63\xc8\x18\x35\x05\x2d\x83\x17\x34\xbe\x2a\x5c\x59\xdb\x0c\x6f\x70\x67\xcf\x67\xc5\x9a\x6d\x77\x4b\x79\x85\x4c\x58\x84\x58\x56\xc2\x78\x78\x7f\xe0\x10\xc8\xca\x34\xb6\x3f\x41\x55\x02\x86\x69\xa3\x1d\xd0\x58\x31\x6a\xd8\x03\xf8\x52\xc9\x05\xcf\xd9\x9e\xec\xe5\x32\xb5\xba\x9f\xbf\x69\xc3\xe6\xaa\x7d\x7d\xd0\x00\xa9\x74\x59\x40\x5c\x68\x0b\xae\xe7\xb0\x35\x0b\x4d\x9e\xde\x31\xcc\xc0\x14\x25\xfc\x72\x99\xee\x02\x19\xca\x73\x10\x81\x8b\x9f\x4f\x6a\x72\xc6\xef\x4f\x6b\x3d\xe2\xe7\x84\xc0\x9d\xef\xa1\x9d\xd3\x79\xc7\x53\x9c\xb1\x78\xb9\x55\xab\xf3\x50\x94\x94\x79\x4d\x17\x48\x66\x8a\xfc\xa4\x82\x0e\x90\x73\x61\xce\x36\x8a\xdd\x7c\x81\xf6\x3f\x24\x81\xcd\xb5\xcf\x66\xd3\xc9\x56\x98\xf3\x8d\x6c\x77\x9f\xe8\xce\xa3\x9b\x63\x57\x92\x9d\xac\x98\x39\xad\xe2\xb0\x1b\xd0\x3c\xe1\xf7\xf6\x60\xaf\xd8\x23\x58\x56\xcc\x40\x0a\x04\xa1\x56\xf1\x4b\x4e\x4c\xe3\xba\x9f\x27\x91\xf1\x92\xa9\x59\x9c\x33\x2a\x66\xb2\xf5\xd5\x9a\xb2\x42\xae\x18\x68\x6e\x15\x16\x86\x72\xc1\x54\x7d\x4c\x78\x41\x53\xa6\x61\x32\x6a\x40\x15\x83\xab\x82\x62\xcd\xd8\x12\x32\x4f\x82\x53\x04\x75\x3a\x94\x1a\x84\x6e\x95\xea\x5a\x7b\x0d\x9a\xca\x2e\xee\x40\xd7\x4b\x74\x37\xee\xa2\x84\xff\xee\xde\x2e\xdd\x52\x95\xea\xad\xab\x2a\x4e\xfa\xb3\x25\x64\x21\x85\xc9\x7e\x38\x66\x53\xdf\xd3\x38\x7f\x69\x8b\xc9\x9f\x15\xf4\x11\xa4\x4f\x46\xdd\x17\xef\x71\xe1\x3e\xd4\xee\x47\xfa\x25\x54\xa4\xb9\x7d\x86\x6a\x4c\xed\xad\x74\xd0\x21\xb5\xe1\x59\x5d\x55\x01\xb2\x80\xff\xea\x40\x13\xf2\xed\xf5\x19\xcc\x33\x76\xcb\x0d\x7b\xa4\xe7\xea\xfd\x3d\xd8\xcf\x6c\xa9\xe1\x2d\x37\xb8\x43\x5c\x19\x90\x04\x5d\x74\x2d\xac\x77\xa7\x64\x3e\x12\x62\xe0\x9e\x80\xe4\x99\x51\x5a\x48\x3a\x5f\x55\x2b\xed\xed\x74\xf2\x07\x32\x9b\xbe\x21\xdf\x40\xc8\x82\xe7\x86\x29\xfb\xb5\x51\x47\xea\x59\x72\xbd\x16\x9a\xb5\xa1\xa6\x0d\xc9\xd5\xf6\xdd\x75\x06\x90\x0b\xfb\x00\x0a\x8b\xe9\x39\x5c\xd7\x4e\x5f\x1f\x68\x3b\x6a\xdc\xcb\x3f\x5c\xe7\x6e\xef\x61\xfb\x45\x79\xf5\xb5\xf3\x7f\x00\x00\x00\xff\xff\x7e\x59\xd1\x8f\xcf\x0c\x00\x00")

func makeDefaultYamlBytes() ([]byte, error) {
	return bindataRead(
		_makeDefaultYaml,
		"make/default.yaml",
	)
}

func makeDefaultYaml() (*asset, error) {
	bytes, err := makeDefaultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/default.yaml", size: 3279, mode: os.FileMode(420), modTime: time.Unix(1471729899, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"make/default.yaml": makeDefaultYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"make": &bintree{nil, map[string]*bintree{
		"default.yaml": &bintree{makeDefaultYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

